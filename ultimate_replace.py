#!/usr/bin/env python3
"""
–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å 0 –≤—Ö–æ–∂–¥–µ–Ω–∏–π
"""

import os
import re
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/mnt/c/Users/chelaxian/Desktop/tg-ytdlp-NEW')
from CONFIG.messages import MessagesConfig as Messages

def get_variables_with_zero_occurrences():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å 0 –≤—Ö–æ–∂–¥–µ–Ω–∏–π"""
    import subprocess
    result = subprocess.run(['python3', 'test_count_var.py'], 
                          cwd='/mnt/c/Users/chelaxian/Desktop/tg-ytdlp-NEW/_backup',
                          capture_output=True, text=True)
    
    zero_vars = []
    for line in result.stdout.split('\n'):
        if line.strip().endswith(' 0'):
            var_name = line.strip().split()[0]
            zero_vars.append(var_name)
    
    return zero_vars

def get_message_text(var_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
    try:
        return getattr(Messages, var_name)
    except AttributeMessages.ERROR_UNKNOWN_MSG.format(error=error):
        return None

def create_comprehensive_patterns(text):
    """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    patterns = []
    
    # 1. –¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    patterns.append(text)
    
    # 2. –¢–µ–∫—Å—Ç –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    patterns.append(text.replace('\n', ' '))
    
    # 3. –¢–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    patterns.append(text.replace('\n', '\\n'))
    
    # 4. –¢–µ–∫—Å—Ç —Å –¥–≤–æ–π–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    patterns.append(text.replace('\n', '\n\n'))
    
    # 5. –¢–µ–∫—Å—Ç —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
    patterns.append(re.sub(r'\s+', ' ', text))
    
    # 6. –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    words = re.findall(r'\b\w+\b', text)
    for word in words:
        if len(word) > 3:
            patterns.append(word)
    
    # 7. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—ã
    phrases = re.findall(r'[^.!?\n]+', text)
    for phrase in phrases:
        phrase = phrase.strip()
        if len(phrase) > 8:
            patterns.append(phrase)
    
    # 8. –ò–∑–≤–ª–µ–∫–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    html_matches = re.findall(r'<[^>]+>[^<]*</[^>]+>', text)
    for html in html_matches:
        patterns.append(html)
    
    # 9. –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∏—Ö
    emoji_matches = re.findall(r'[^\w\s][^\w\s]*\s*[^.!?\n]*', text)
    for emoji_text in emoji_matches:
        if len(emoji_text.strip()) > 4:
            patterns.append(emoji_text.strip())
    
    # 10. –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    if len(text) > 30:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤
        patterns.append(text[:30])
    if len(text) > 50:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
        patterns.append(text[:50])
    if len(text) > 100:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
        patterns.append(text[:100])
    
    # 11. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    lines = text.split('\n')
    for line in lines:
        line = line.strip()
        if len(line) > 5:
            patterns.append(line)
    
    # 12. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.findall(r'[^.!?]+[.!?]', text)
    for sentence in sentences:
        sentence = sentence.strip()
        if len(sentence) > 10:
            patterns.append(sentence)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ
    patterns = list(set(patterns))
    patterns.sort(key=len, reverse=True)
    
    return patterns

def find_and_replace_in_file(file_path, var_name, message_text):
    """–ù–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        replacements_made = []
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        patterns = create_comprehensive_patterns(message_text)
        
        for pattern in patterns:
            if len(pattern) < 4:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                continue
                
            # –ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            matches = list(re.finditer(re.escape(pattern), content, re.IGNORECASE | re.MULTILINE | re.DOTALL))
            
            for match in reversed(matches):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –∫–æ–Ω—Ü–∞
                start, end = match.span()
                matched_text = match.group()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à —Ç–µ–∫—Å—Ç
                if len(matched_text) < len(message_text) * 0.2:  # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ–Ω—É
                if '{' in message_text and '}' in message_text:
                    params = re.findall(r'\{(\w+)\}', message_text)
                    if params:
                        param_str = ', '.join([f"{param}={param}" for param in params])
                        replacement = f"Messages.{var_name}.format({param_str})"
                    else:
                        replacement = f"Messages.{var_name}"
                else:
                    replacement = f"Messages.{var_name}"
                
                # –ó–∞–º–µ–Ω—è–µ–º
                content = content[:start] + replacement + content[end:]
                replacements_made.append(f"–ó–∞–º–µ–Ω–µ–Ω: {matched_text[:50]}... -> {replacement}")
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            return True, replacements_made
        else:
            return False, []
            
    except Exception as e:
        return False, [f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}"]

def add_import_if_needed(file_path):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç Messages –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'Messages.' in content and 'from CONFIG.messages import MessagesConfig as Messages' not in content:
            lines = content.split('\n')
            import_line = 'from CONFIG.messages import MessagesConfig as Messages'
            
            for i, line in enumerate(lines):
                if line.startswith('import ') or line.startswith('from '):
                    continue
                else:
                    lines.insert(i, import_line)
                    break
            else:
                lines.insert(0, import_line)
            
            content = '\n'.join(lines)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return True
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ –≤ {file_path}: {e}")
        return False

def main():
    print("üîç –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
    
    zero_vars = get_variables_with_zero_occurrences()
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å 0 –≤—Ö–æ–∂–¥–µ–Ω–∏–π: {len(zero_vars)}")
    
    base_dir = '/mnt/c/Users/chelaxian/Desktop/tg-ytdlp-NEW'
    exclude_dirs = {'.git', '__pycache__', 'venv', '.venv', '_backup', '_cursor', '.cursor', 'node_modules'}
    
    total_replacements = 0
    files_processed = set()
    
    for var_name in zero_vars:
        print(f"\nüîç –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ –∏—â–µ–º {var_name}...")
        message_text = get_message_text(var_name)
        
        if not message_text:
            print(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MessagesConfig")
            continue
        
        print(f"üìù –¢–µ–∫—Å—Ç: {message_text[:100]}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        patterns = create_comprehensive_patterns(message_text)
        print(f"üîç –°–æ–∑–¥–∞–Ω–æ {len(patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        files_changed = 0
        for root, dirs, files in os.walk(base_dir):
            dirs[:] = [d for d in dirs if d not in exclude_dirs]
            
            for file in files:
                if file.endswith('.py') and file != 'messages.py':
                    file_path = os.path.join(root, file)
                    
                    success, replacements = find_and_replace_in_file(file_path, var_name, message_text)
                    
                    if success:
                        files_changed += 1
                        files_processed.add(file_path)
                        total_replacements += len(replacements)
                        print(f"  ‚úÖ {os.path.basename(file_path)}: {len(replacements)} –∑–∞–º–µ–Ω")
                        for replacement in replacements[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                            print(f"      {replacement}")
                        if len(replacements) > 2:
                            print(f"      ... –∏ –µ—â–µ {len(replacements) - 2} –∑–∞–º–µ–Ω")
        
        if files_changed == 0:
            print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è {var_name}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file_path in files_processed:
        if add_import_if_needed(file_path):
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Messages –≤ {file_path}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_processed)}")
    print(f"–í—Å–µ–≥–æ –∑–∞–º–µ–Ω: {total_replacements}")

if __name__ == "__main__":
    main()
